
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id String @id @default(uuid())
  name String 
  email String @unique 
  picture String @db.Text 
  role Role @default(USER) 

  stores Store[] @relation("UserStores")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String 
  image String
  url String 
  featured Boolean @default(false) 
  subCategories SubCategory[] @relation("CategoryToSubcategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id String @id @default(uuid())
  name String 
  url String 
  featured Boolean @default(false) 

  categoryId String
  category Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Brand {
  id String @id @default(uuid())
  name String 
  image String
  url String 
  featured Boolean @default(false) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id String @id @default(uuid())
  name String
  description String
  email String @unique
  phone String
  url String
  logo String
  cover String
  status StoreStatus @default(PENDING)
  aveagerating Float @default(0)
  featured Boolean @default(false)
  returnPolicy String?
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?

  userId String
  user User @relation("UserStores", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}