
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id String @id @default(uuid())
  name String 
  email String @unique 
  picture String @db.Text 
  role Role @default(USER) 

  stores Store[] @relation("UserStores")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String 
  image String
  url String 
  featured Boolean @default(false) 

  subCategories SubCategory[] @relation("CategoryToSubcategory")
  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id String @id @default(uuid())
  name String 
  url String 
  featured Boolean @default(false) 

  categoryId String
  category Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  products Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}


enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id String @id @default(uuid())
  name String
  description String
  email String @unique
  phone String
  url String @unique
  logo String
  cover String
  status StoreStatus @default(PENDING)
  averageRating Float @default(0)
  featured                            Boolean     @default(false)
  returnPolicy                        String      @default("Return in 30 days.")
  defaultShippingService              String      @default("International Delivery")
  defaultShippingFeePerItem           Float       @default(0)
  defaultShippingFeeForAdditionalItem Float       @default(0)
  defaultShippingFeePerKg             Float       @default(0)
  defaultShippingFeeFixed             Float       @default(0)
  defaultDeliveryTimeMin              Int         @default(7)
  defaultDeliveryTimeMax              Int         @default(31)

  userId String
  user User @relation("UserStores", fields: [userId], references: [id])

  products Product[] @relation("StoreToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  slug String @unique
  brand String
  rating Float @default(0)

  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  
  variants ProductVariant[] @relation("ProductToProductVariant")

  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  subCategoryId String
  subCategory SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  offerTagId String
  offerTag OfferTag @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id String @id @default(uuid())
  variantName String
  variantDescription String
  slug String @unique
  isSale Boolean @default(false)
  keywords String
  sku String

  productId String
  product Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes Size[] @relation("ProductvariantSizes")
  images Image[] @relation("ProductvariantImages")
  colors Color[] @relation("ProductvariantColors")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Size {
  id String @id @default(uuid())
  size String
  quantity Int
  price Float
  discount Float @default(0)

  productVariantId String
  productVariant ProductVariant @relation("ProductvariantSizes", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model Image {
  id String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant ProductVariant @relation("ProductvariantImages", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model Color {
  id String @id @default(uuid())
  name String

  productVariantId String
  productVariant ProductVariant @relation("ProductvariantColors", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model OfferTag {
  id String @id @default(uuid())
  name String
  url String

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}